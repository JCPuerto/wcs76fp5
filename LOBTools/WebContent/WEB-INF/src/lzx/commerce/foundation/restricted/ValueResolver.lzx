<!--
 =================================================================
  Licensed Materials - Property of IBM

  WebSphere Commerce

  (C) Copyright IBM Corp. 2007, 2011 All Rights Reserved.

  US Government Users Restricted Rights - Use, duplication or
  disclosure restricted by GSA ADP Schedule Contract with
  IBM Corp.
 =================================================================
-->
<library>

	<!---
		Declares a value resolver which resolves a value based on the specified criteria. This
		class should not be instantiated directly. It is the base class that provides a common
		mechanism for resolving values. Depending on which attributes are specified, the resolved value
		will be a constant value, the value of a {@link wcfContextValue context value}, or a
		property or attribute of a resolved {@link wcfModelObject object}.

		<p>If <code>value</code> is specified, the value resolver
		will always return the specified value.
		
		<p>If <code>contextName</code> is specified then the value will be resolved
		by searching for a {@link wcfContextValue} with a matching parameter name.
		
		<p>If <code>propertyName</code>, <code>checkReadOnly</code>, <code>checkNewObject</code> or <code>checkHasAccessRight</code> is
		specified, then the value will be resolved by first resolving the right {@link wcfModelObject object}
		and then returning the specified attribute or property. The model object will be resolved relative
		to the current object depending on the values specified by <code>parentProperty</code>,
		<code>resolvePrimaryParent</code>, <code>parentType</code> and <code>objectPath</code>.
		For a definition of what the current object is, see the classes that extend this base class.
	-->
	<class name="wcfValueResolver" extends="node">
		<!---
			The name of this value. If "name" is specified without specifying any other
			attributes, then the value will be resolved by searching for a {@link wcfContextValue} with
			a matching parameter name. This is a required attribute.
			@type String
		-->
		<attribute name="name"/>
		
		<!---
			Optional value. If specified, it will be used as the resolved value.
			
			For example, if <code>name="MyPropertyName"</code> and
			<code>value="MyPropertyValue"</code>, then
			this resolver will always return the value "MyPropertyValue".
			This is equivalent to a constant. This attribute cannot be combined with
			<code>contextName</code>, <code>propertyName</code>, <code>objectPath</code>, <code>parentProperty</code>,
			<code>resolvePrimaryParent</code>, <code>parentType</code>, <code>checkObjectDefinition</code>,
			<code>checkReadOnly</code>, <code>checkNewObject</code>, <code>checkHasAccessRight</code> or <code>viewOptionType</code>.
		-->
		<attribute name="value" type="string" value="${null}"/>
		
		<!---
			Indicates that this value is derived from the parent object. The parent object is the
			closest primary object in the current object's hierarchy.
			
			For example, if <code>name="MyPropertyName"</code>,
			<code>propertyName="a"</code>, and <code>parentProperty="true"</code>, then
			this resolver will return the parent object's value of the property named
			<code>a</code>. The default is "false". This attribute cannot be combined with <code>value</code> or
			<code>contextName</code>.
		-->
		<attribute name="parentProperty" type="boolean" value="false"/>
		<!---
			Indicates that the parent property retrieved must be the parent primary object.  If it is
			false it returns the immediate parent. This attribute cannot be combined with <code>value</code> or
			<code>contextName</code>.
		-->
		<attribute name="resolvePrimaryParent" type="boolean" value="true"/>
		
		<!---
			Qualifies the search for the parent object to those primary objects with the
			specified object type or object group.  Used only when the <code>parentProperty="true"</code>.
		-->
		<attribute name="parentType" type="string" value="${null}"/>
		
		<!---
			Optional object property name. If specified, the value
			of the specified property will be used as the resolved value. This attribute
			cannot be combined with <code>value</code>, <code>contextName</code>,
			<code>checkReadOnly</code>, <code>checkNewObject</code>, or <code>checkHasAccessRight</code>.
		-->
		<attribute name="propertyName" type="string" value="${null}"/>
		
		<!---
			Indicates the object path that is used to locate the right child object {@link wcfModelObject} relative
			to the current object. If <code>parentProperty</code> is set to "true", the value resolver will first
			find the parent object before applying the object path.
			This attribute cannot be combined with <code>value</code> or <code>contextName</code>.
		-->		
		<attribute name="objectPath" type="string" value="${null}"/>

		<!---
			Check the object definition of the resolved object. If this attribute is set to "true",
			then <code>propertyName</code> will be interpreted as an attribute name of the {@link wcfObjectDefinition object definition}
			associated with the resolved object. The resolved value will be the value of the object definition attribute.
			For example, let <code>ProductType</code> be the object type of the current object's parent primary object.
			If <code>checkObjectDefinition="true"</code>, <code>propertyName="objectType"</code>, and <code>parentProperty="true"</code>,
			then this resolver will resolve to the current object's parent primary object and return it's object type which is <code>ProductType</code>.
			This attribute cannot be combined with <code>value</code>, <code>contextName</code>, <code>checkReadOnly</code>,
			<code>checkNewObject</code>, <code>checkHasAccessRight</code> or <code>viewOptionType</code>.
		-->
		<attribute name="checkObjectDefinition" type="boolean" value="false"/>
		
		<!---
			Check if the resolved object is read only. If this attribute is set to "true", then the resolved value will be "true"
			if the resolved object is in read-only state. This attribute cannot be combined with
			<code>value</code>, <code>propertyName</code>, <code>contextName</code>, <code>checkObjectDefinition</code>,
			<code>checkNewObject</code>, <code>checkHasAccessRight</code> or <code>viewOptionType</code>.
		-->
		<attribute name="checkReadOnly" type="boolean" value="false"/>
		
		<!---
			Check if the resolved object is a new object. If this attribute is set to "true", then the resolved value will
			be "true" if the resolved object is a new object. A new object is one that was created on the client and has
			not yet been saved. This attribute cannot be combined with <code>value</code>, <code>propertyName</code>,
			<code>contextName</code>, <code>checkObjectDefinition</code>, <code>checkReadOnly</code>, 
			<code>checkHasAccessRight</code> or <code>viewOptionType</code>.
		-->
		<attribute name="checkNewObject" type="boolean" value="false"/>

		<!---
			Check if the business user has edit access to the resolved object. If this attribute is set to "true", then the resolved value
			will be "true" if the business user has edit access to the object. This attribute cannot be combined with <code>value</code>,
			<code>propertyName</code>, <code>contextName</code>, <code>checkObjectDefinition</code>, <code>checkReadOnly</code>, 
			<code>checkNewObject</code> or <code>viewOptionType</code>.
		-->
		<attribute name="checkHasAccessRight" type="boolean" value="false"/>
		
		<!---
			The name of the context value. If this is specified, then the framework will search for a {@link wcfContextValue context value} with
			the specified {wcfContextValue#parameterName name}. The resolved value will be the value of this context value. This attribute cannot
			be combined with <code>value</code>, <code>propertyName</code>, <code>objectPath</code>, <code>parentProperty</code>,
			<code>resolvePrimaryParent</code>, <code>parentType</code>, <code>checkObjectDefinition</code>, <code>checkObjectDefinition</code>,
			<code>checkReadOnly</code>, <code>checkNewObject</code>, <code>checkHasAccessRight</code> or <code>viewOptionType</code>.
		-->
		<attribute name="contextName" type="string" value="${null}"/>
		
		<!---
			@keywords private
			Indicates that this value is resolved from a wcfModelProperty.
		-->
		<attribute name="isPropertyValue" type="boolean" value="false"/>
		
		<!---
			@keywords private
			Indicates that this value is resolved from a wcfContextValue.
		-->
		<attribute name="isContextValue" type="boolean" value="false"/>

		<!---
			The name of the view option type. This value will be matched against the {@link wcfViewOption#viewOptionType view option types}
			associated with the resolved object. The resolved value will be the value of the view option.
			This attribute cannot be combined with <code>checkObjectDefinition</code>, <code>value</code>, <code>contextName</code>,
			<code>checkReadOnly</code>, <code>checkNewObject</code> or <code>checkHasAccessRight</code>.
		-->
		<attribute name="viewOptionType" type="string" value="${null}" />

		<!---
			@keywords private
			Force the value resolver to resolve all of the possible value sources. By default, all the value
			sources are resolved only if isPropertyValue is true.
		-->
		<attribute name="forceResolveAll" type="boolean" value="false" />
		<!---
			@keywords private
			Get the display name for property values.
		-->
		<attribute name="resolveDisplayName" type="boolean" value="false" />

		<!---
			@keywords private
		-->
		<method name="init">
			<![CDATA[
			super.init();
			if (!this.value) {
				if (this.parentProperty || this.propertyName || this.objectPath) {
					this.isPropertyValue = !this.checkObjectDefinition && !this.checkReadOnly && !this.checkNewObject && !this.checkHasAccessRight && this.viewOptionType == null;
				}
				else if (!this.checkObjectDefinition && !this.checkReadOnly && !this.checkNewObject && !this.checkHasAccessRight && this.viewOptionType == null) {
					if (this.contextName == null && this.name != null && this.name != "") {
						this.contextName = this.name;
					}
					if (this.contextName != null) {
						this.isContextValue = true;
					}
				}
				if ((this.isPropertyValue || this.checkObjectDefinition) && this.propertyName == null) {
					this.propertyName = this.name;
				}
			}
			]]>
		</method>
		
		<!---
			@keywords private
			Returns the resolved value for the specified model object.
			@param wcfModelObject o: the model object
			@return string: the resolved value
		-->
		<method name="getValue" args="o">
			<![CDATA[
			var value = null;
			if (this.value) {
				value = this.value;
			}
			else if (this.isContextValue) {
				var contextValue = this.getContextValue(o);
				if (contextValue) {
					value = contextValue.value;
				}
			}
			else {
				var object = this.getObject(o);
				if (object) {
					if (this.isPropertyValue) {
						value = object.getPropertyValue(this.propertyName);
						if (this.resolveDisplayName) {
							var propertyDefinition = object.objectDefinition.getPropertyDefinition(object, this.propertyName);
							if (propertyDefinition) {
								var propValues = propertyDefinition.getPropertyValues(object);
								for (var i = 0; i < propValues.length; i++) {
									if (propValues[i].value == value) {
										value = propValues[i].displayName;
										break;
									}
								}
							}
						}
					}
					else if (this.checkObjectDefinition) {
						value = object.objectDefinition[this.propertyName];
					}
					else if (this.checkNewObject) {
						value = object.newObject ? "true" : "false";
					}
					else if (this.checkReadOnly) {
						value = object.readOnly ? "true" : "false";
					}
					else if (this.checkHasAccessRight) {
						value = object.hasAccessRight ? "true" : "false";
					}
					else if (this.viewOptionType != null) {
						value = "false";
						for (var i = 0; i < object.objectDefinition.viewOptions.length; i++) {
							if (object.objectDefinition.viewOptions[i].viewOptionType == this.viewOptionType) {
								value = object.objectDefinition.viewOptions[i].value ? "true" : "false";
								break;
							}
						}
					}
				}
			}
			return value;
			]]>
		</method>

		<!---
			@keywords private
			Returns the value source for the specified model object.
			@param wcfModelObject o: the model object
			@param lz.Delegate del delegate to call if the value source changes
			@return Object: the value source
		-->
		<method name="getValueSource" args="o, del=null">
			<![CDATA[
			var valueSource = null;
			if (this.value) {
				valueSource = this;
			}
			else if (this.isContextValue) {
				valueSource = this.getContextValue(o, del);
			}
			else {
				var object = this.getObject(o, del);
				if (object) {
					if (this.isPropertyValue) {
						valueSource = object.getProperty(this.propertyName);
					}
					else if (this.checkObjectDefinition) {
						valueSource = object.objectDefinition;
					}
					else if (this.viewOptionType != null) {
						for (var i = 0; i < object.objectDefinition.viewOptions.length; i++) {
							if (object.objectDefinition.viewOptions[i].viewOptionType == this.viewOptionType) {
								valueSource = object.objectDefinition.viewOptions[i];
								break;
							}
						}
					}
					else if (this.checkNewObject || this.checkReadOnly || this.checkHasAccessRight) {
						valueSource = object;
					}
				}
			}
			return valueSource;
			]]>
		</method>

		<!---
			@keywords private
			Returns the object that matches the value resolver criteria.
			@param wcfModelObject o: the model object
			@param lz.Delegate del delegate to call if the model object changes
			@return wcfModelObject: the matching model object
		-->
		<method name="getObject" args="o, del=null">
			<![CDATA[
			var object = null;
			if (this.parentProperty) {
				if (this.resolvePrimaryParent) {
					object = o.getParentPrimaryObject(this.parentType, del);
					if (object != null && this.objectPath) {
						object = object.getObject(this.objectPath, false, o, del);
					}
				}
				else {
					object = o.parentObject;
					if (object != null && this.objectPath) {
						object = object.getObject(this.objectPath, false, null, del);
					}
				}
			}
			else if (this.objectPath) {
				object = o.getObject(this.objectPath, false, null, del);
			}
			else {
				object = o;
			}
			return object;
			]]>
		</method>


		<!---
			@keywords private
			Returns all the resolved value for the specified model object.
			@param wcfModelObject o: the model object
			@param boolean trim: "true" if we should check for trimable properties and trim them
			@return array: an array of the resolved values
		-->
		<method name="getValues" args="o, trim=false">
			<![CDATA[
			var values = [];
			if (this.value) {
				values.push(this.value);
			}
			else if (this.isContextValue) {
				var contextValue = this.getContextValue(o);
				if (contextValue) {
					values.push(contextValue.value);
				}
			}
			else {
				var objects = this.getObjects(o);
				for (var i = 0; i < objects.length; i++) {
					if (this.isPropertyValue) {
						var value = objects[i].getPropertyValue(this.propertyName, null, trim);
						if (this.resolveDisplayName) {
							var propertyDefinition = objects[i].objectDefinition.getPropertyDefinition(objects[i], this.propertyName);
							if (propertyDefinition) {
								var propValues = propertyDefinition.getPropertyValues(objects[i]);
								for (var j = 0; j < propValues.length; j++) {
									if (propValues[j].value == value) {
										value = propValues[j].displayName;
										break;
									}
								}
							}
						}
						values.push(value);
					}
					else if (this.checkObjectDefinition) {
						values.push(objects[i].objectDefinition[this.propertyName]);
					}
					else if (this.checkNewObject) {
						values.push(objects[i].newObject ? "true" : "false");
					}
					else if (this.checkReadOnly) {
						values.push(objects[i].readOnly ? "true" : "false");
					}
					else if (this.checkHasAccessRight) {
						values.push(objects[i].hasAccessRight ? "true" : "false");
					}
					else if (this.viewOptionType != null) {
						var value = "false";
						for (var j = 0; j < objects[i].objectDefinition.viewOptions.length; j++) {
							if (objects[i].objectDefinition.viewOptions[j].viewOptionType == this.viewOptionType) {
								value = "true";
								break;
							}
						}
						values.push(value);
					}
				}
			}
			return values;
			]]>
		</method>

		<!---
			@keywords private
			Returns the list objects that match the value resolver criteria.
			@param wcfModelObject o: the model object
			@return array: the array of related objects
		-->
		<method name="getObjects" args="o">
			<![CDATA[
			var objects = [];
			if (this.parentProperty) {
				var parentObject = null;
				if (this.resolvePrimaryParent) {
					parentObject = o.getParentPrimaryObject(this.parentType);
					if (parentObject != null && this.objectPath) {
						if (this.forceResolveAll) {
							objects = parentObject.getObjects(this.objectPath, null, null, true);
							parentObject = null;
						}
						else {
							parentObject = parentObject.getObject(this.objectPath, false, o);
						}
					}
				}
				else {
					parentObject = o.parentObject;
					if (parentObject != null && this.objectPath) {
						if (this.isPropertyValue || this.forceResolveAll) {
							objects = parentObject.getObjects(this.objectPath, null, null, true);
							parentObject = null;
						}
						else {
							parentObject = parentObject.getObject(this.objectPath, false, null);
						}
					}
				}
				if (parentObject != null) {
					objects.push(parentObject);
				}
			}
			else if (this.objectPath) {
				if (this.isPropertyValue || this.forceResolveAll) {
					objects = o.getObjects(this.objectPath, null, null, true);
				}
				else {
					var childObject = o.getObject(this.objectPath, false, null);
					if (childObject != null) {
						objects.push(childObject);
					}
				}
			}
			else {
				objects.push(o);
			}
			return objects;
			]]>
		</method>

		<!---
			@keywords private
			Returns the context value object.
			@param node n: the node from which to begin the search
			@return wcfContextValue: the context value object
		-->
		<method name="getContextValue" args="n, del=null">
			<![CDATA[
			var contextValue = null;
			if (this.isContextValue) {
				if (n == null) {
					n = this;
				}
				contextValue = wcfContextUtil.findContextValue(n, (this.contextName), del);
			}
			return contextValue;
			]]>
		</method>
		
		<!---
			@keywords private
			Register a delegate to be executed when the resolved value changes
			for the specified model object.
			@param wcfModelObject o: the model object
			@param lz.Delegate del: the delegate
		-->
		<method name="registerDelegate" args="o, del">
			<![CDATA[
			var valueSource = getValueSource(o, del);
			if (valueSource != null && !this.checkObjectDefinition) {
				if (this.checkNewObject) {
					del.register(valueSource, "onnewObject");					
				}
				else if (this.checkReadOnly) {
					del.register(valueSource, "onreadOnly");
				}
				else if (this.checkHasAccessRight) {
					del.register(valueSource, "onhasAccessRight");
				}
				else{
					del.register(valueSource, "onvalue");
				}
			}
			]]>
		</method>
		
		<!---
			@keywords private
			Returns true if the value defined by this value resolver can be resolved for the specified model object.
			@param wcfModelObject o: the model object
		-->
		<method name="isResolvable" args="o">
			<![CDATA[
			var resolvable = true;
			if (this.isContextValue) {
				var node = o;
				if (o == null) {
					node = this;
				}
				while (node) {
					if (typeof(node["localContext"]) != "undefined") {
						resolvable = false;
						if (node.localContext == null || this.getContextValue(node) != null) {
							resolvable = true;
						}
						break;
					}
					if (node["parent"] && node != node.parent) {
						node = node.parent;
					}
					else {
						node = null;
					}
				}
				if (node == null) {
					resolvable = this.getContextValue(null) != null;
				}
			}
			return resolvable;
			]]>
		</method>
	</class>
</library>
