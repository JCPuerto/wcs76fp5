<!--
 =================================================================
  Licensed Materials - Property of IBM

  WebSphere Commerce

  (C) Copyright IBM Corp. 2007, 2012 All Rights Reserved.

  US Government Users Restricted Rights - Use, duplication or
  disclosure restricted by GSA ADP Schedule Contract with
  IBM Corp.
 =================================================================
-->

<library>
	<!---
		Store preview store search dialog class.
		@keywords private
	-->
	<class name="wcfstoreSearchDialogForPreview" extends="wcfStoreSearchDialogBase">
		<!---
			Indicates that the currently selected store is mobile enabled.
		-->
		<attribute name="mobileEnabled" type="boolean" value="false"/>
		
		<!---
		@keywords private
		-->
		<method name="init">
			<![CDATA[
				super.init();
				this.checkMobileEnabledDel = new lz.Delegate(this, "checkMobileEnabled");
			]]>
		</method>
		
		<!--- @keywords private -->
		<method name="destroy">
			<![CDATA[
			this.checkMobileEnabledDel.unregisterAll();
			delete this.checkMobileEnabledDel;
			super.destroy();
			]]>
		</method>

		<!---
			Check the OK button enablement
		-->
		<method name="checkOkEnabled">
			<![CDATA[
			this.setAttribute("okEnabled", this.selectedStore != null && this.selectedStore.configurationLoaded);
			]]>
		</method>

		<!---
			Check the mobile radio button enablement.
		-->
		<method name="checkMobileEnabled" args="e=null">
			<![CDATA[
			this.checkMobileEnabledDel.unregisterAll();
			var mobileEnabled = false;
			var store = this.selectedStore;
			if (store != null) {
				if (store.configurationLoaded) {
					mobileEnabled = store.staticContent.storeLevel.indexOf("MOBILE") != -1;
					if (!mobileEnabled && this.mobileStoreSelector.mobileStore.selected) {
						this.mobileStoreSelector.select(this.mobileStoreSelector.regularStore);
					}
				}
				else {
					this.checkMobileEnabledDel.register(store, "onconfigurationLoaded");
					store.loadConfiguration();
				}
			}
			this.setAttribute("mobileEnabled", mobileEnabled);
			]]>
		</method>

		<!---
			Handle store selected event.
		-->
		<handler name="onselectedStore">
			<![CDATA[
			this.checkMobileEnabled();
			]]>
		</handler>
				
		<!---
			Reset the values in the dialog for things that should not be persisted when the dialog is closed.
		-->
		<method name="closeWindow">
			<![CDATA[
			this.mobileStoreSelector.select(this.mobileStoreSelector.regularStore)
			super.closeWindow();
			this.checkMobileEnabledDel.unregisterAll();
			]]>
		</method>

		<!---
			Handle OK.
		-->
		<method name="handleOk">
			<![CDATA[
			if (this.okEnabled) {
				this.setStoreDelegate.execute({store: this.selectedStore, mobile: this.mobileStoreSelector.mobileStore.selected});
				this.closeWindow();
			}
			]]>
		</method>

		<view height="10" placement="searchView" />
		<wcfBaseRadioGroup name="mobileStoreSelector" placement="searchView">
			<wcfBaseRadioButton name="regularStore" text="${foundationResources.storePreviewPreviewRegularStore.string}" value="${'regular'}" selected="true"/>
			<wcfBaseRadioButton name="mobileStore" text="${foundationResources.storePreviewPreviewMobileStore.string}" value="${'mobile'}" enabled="${classroot.mobileEnabled}" />
		</wcfBaseRadioGroup>
		
	</class>
	<wcfstoreSearchDialogForPreview id="storeSearchDialogForPreview"/>
	
	<!---
		@keywords private
		This is the store preview dialog.  It is opened when the user selects store preview from the Management Center toolbar.  This class contains:
		<ul>
		<li>the store preview option widgets
		<li>the Launch Preview button which will launch the preview
		<li>the Cancel button which will cancel and close the dialog
		</ul>
	-->
	<wcfDialog id="wcfStorePreviewDialog" title="${foundationResources.storePreviewDialogTitle.string}">
		<!---
			@keywords private
			The business object editor.
		-->
		<attribute name="oEditor" value="null"/>
		<!---
			@keywords private
			Controls the opening and closing of the options view on the dialog
		-->
		<attribute name="optionsOpen" type="boolean" value="false"/>
		<!---
			List of wcfStore objects that are returned by the get all stores service. The list only includes
			customer facing stores.
		-->
		<attribute name="storeList" value="[]"/>
		<!---
			Maximum number of URL that the current address selector can list.
		-->
		<attribute name="maxURLsToList" value="${configProperties.maximumStoresInList}"/>
		<!---
			The URI to use for constructing store URLs.
		-->
		<attribute name="storesWebPath" type="string" value=""/>
		<!---
			@keywords private
		-->
		<attribute name="contentWidth" type="number" value="550"/>
		<!---
			@keywords private
			A map containing values that will be restored when the dialog is canceled.
		-->
		<attribute name="resetValues" value="null"/>		
		<!---
			@keywords private
		-->
		<attribute name="populatedCount" type="number" value="0" />
		<!---
			@keywords private
		-->
		<attribute name="storeListLoaded" type="boolean" value="false" />
		<!---
			@keywords private
			A list of custom store preview options.
		-->
		<attribute name="customOptions" value="[]" />
		<!---
			@keywords private
			The names of the customers segments to which the customer should belong in the store.
		-->
		<attribute name="customerSegmentsIncludedNames" type="string" value=""/>
		<!---
			@keywords private
			The IDs of the customer segments to which the customer should belong in the store.
		-->
		<attribute name="customerSegmentsIncludedIds" type="string" value=""/>				

		<text text="${foundationResources.storePreviewURLInstructions.string}" fgcolor="${wcfStorePreviewDialog.style.texthilitecolor}" multiline="true" width="${wcfStorePreviewDialog.contentWidth}"/>
		<view height="10" />
		<view name="addressView">
			<text text="${foundationResources.storePreviewURLLabel.string}" fgcolor="${wcfStorePreviewDialog.style.texthilitecolor}" multiline="true" width="${wcfStorePreviewDialog.contentWidth}"/>
		  	<wcfInputTextValueSelector name="inputTextValueSelector" width="${wcfStorePreviewDialog.contentWidth}">
				<!---
					@keywords private
					This handler updates the alias text field
				-->
				<handler name="ontext">
					<![CDATA[
					var foundDisplayName = false;
					for (var i=0; i<this.items.length; i++) {
						if (this.items[i].selectable && this.text == this.items[i].value.text) {
							var alias = items[i].alias;
							if (items[i].aliasQualifier != "") {
								alias += " - " + items[i].aliasQualifier;
							}
							wcfStorePreviewDialog.aliasView.aliasText.setText(alias);
							foundDisplayName = true;
						}
					}
					if(!foundDisplayName){
						wcfStorePreviewDialog.aliasView.aliasText.setText(foundationResources.storePreviewAliasNone.string);
					}
					]]>
				</handler>
				
				<!---
					@keywords private
					This method is called when a value is selected from the list. This implementation sets the input field's
					text to match the value's display name.
					@param Object v: the selected value object
				-->
				<method name="handleSelect" args="v">
					<![CDATA[
					if(v==wcfSearchListItem){
						storeSearchDialogForPreview.openStoreSearchDialog(wcfStorePreviewDialog.applyStoreDel, "", "IBM_CustomerFacingStore");
					}else{
						super.handleSelect(v);
					}
					]]>
				</method>
			</wcfInputTextValueSelector>
			<simplelayout axis="y"/>
		</view>
		<view height="10" />
		<view name="aliasView">
			<text text="${foundationResources.storePreviewAliasLabel.string}" fgcolor="${wcfStorePreviewDialog.style.texthilitecolor}" multiline="true" width="${wcfStorePreviewDialog.contentWidth}"/>
			<wcfInputText name="aliasText" width="${wcfStorePreviewDialog.contentWidth}" enabled="false"/>
			<simplelayout axis="y"/>
		</view>
		<view height="10" visible="${wcfStorePreviewDialog.customerSegmentsIncludedNames != ''}" />
		<view name="customerSegmentView" visible="${wcfStorePreviewDialog.customerSegmentsIncludedNames != ''}">
			<wcfExtendedHelpIcon name="storePreviewCustomerSegmentsHelpIcon" helpText="${foundationResources.storePreviewCustomerSegmentsTip.string}" extendedHelpText="${foundationResources.storePreviewCustomerSegmentsExtendedHelp.string}" />
			<view name="customerSegmentLabelView">
				<text text="${foundationResources.storePreviewCustomerSegmentsLabel.string}" fgcolor="${wcfStorePreviewDialog.style.texthilitecolor}" multiline="true" width="${wcfStorePreviewDialog.contentWidth - parent.parent.storePreviewCustomerSegmentsHelpIcon.width}" />
				<text text="${wcfStorePreviewDialog.customerSegmentsIncludedNames}"	fgcolor="${wcfStorePreviewDialog.style.texthilitecolor}" multiline="true" width="${wcfStorePreviewDialog.contentWidth - parent.parent.storePreviewCustomerSegmentsHelpIcon.width}"/>
				<simplelayout axis="y"/>				
			</view>
			<simplelayout axis="x" spacing="2" />
		</view>
		<view height="15" />
		<view name="headertext" focusable="true" height="20" bgcolor="0xDFE8FB" width="${wcfStorePreviewDialog.contentWidth}">
			<simplelayout axis="x"/>
			<basebutton name="headbutton" bgcolor="${parent.bgcolor}" visible="true" resource="propertyDrawerResource"
					width="20"
					onclick="parent.onclick.sendEvent()">
				<method name="init">
					<![CDATA[
					super.init();
					this.updateResourceNumbers();
					]]>
				</method>
				<handler name="onoptionsOpen" reference="wcfStorePreviewDialog">
					<![CDATA[
					this.updateResourceNumbers();
					]]>
				</handler>
				<method name="updateResourceNumbers">
					<![CDATA[
					if (wcfStorePreviewDialog.optionsOpen) {
						this.normalResourceNumber = 4;
						this.overResourceNumber = 5;
						this.downResourceNumber = 6;
					}
					else {
						this.normalResourceNumber = 1;
						this.overResourceNumber = 2;
						this.downResourceNumber = 3;
					}
					this._callShow();
					]]>
				</method>
			</basebutton>
			<statictext y="${parent.height/2 - this.height/2}" text="${foundationResources.storePreviewOptionsLabel.string}" fontstyle="bold"/>
			<handler name="onkeydown" args="code">
				<![CDATA[
				if (code == 32) { // space bar
					this.onclick.sendEvent();
				}
				]]>
			</handler>
			<handler name="onclick">
				<![CDATA[
				wcfStorePreviewDialog.setAttribute("optionsOpen", !wcfStorePreviewDialog.optionsOpen);
				]]>
			</handler>
			<handler name="onfocus">		
				<![CDATA[					
				if(!this["indicator"]){
					new lz.wcfFocusIndicator(this, {
					name: "indicator",
					focusableView: this,
					indicatorView: this.headbutton
					});
				}
				]]>
			</handler>
		</view>
		<view height="10" />
		<view name="storePreviewOptions" visible="${wcfStorePreviewDialog.optionsOpen}">
			<text text="${foundationResources.storePreviewDateTimeLabel.string}" fgcolor="${wcfStorePreviewDialog.style.texthilitecolor}" multiline="true" width="${wcfStorePreviewDialog.contentWidth}"/>	
			<wcfBaseRadioGroup name="dateTimeRadio" >
			   	<wcfBaseRadioButton value="false" text="${foundationResources.storePreviewDateTimeCurrent.string}" selected="true" multiline="true" width="${wcfStorePreviewDialog.contentWidth}"/>
			   	<wcfBaseRadioButton value="true" text="${foundationResources.storePreviewDateTimeElapsed.string}" multiline="true" width="${wcfStorePreviewDialog.contentWidth}"/>
			</wcfBaseRadioGroup>
			<wcfBaseDateTimePicker name="dateTimePicker" enabled="${parent.dateTimeRadio.value}" >
				<!---
					@keywords private
					Gets the formated date and time value for use in the {@Link wcfStorePreviewOptions}
				-->
				<method name="getDateValue"><![CDATA[
					var newDateTime = this.getDateTime();
					if(newDateTime == "" || !this.enabled){
						return null;
					}
					return wcfDateUtil.format(newDateTime, "yyyy/MM/dd HH:mm:ss");				
					]]>
				</method>
			</wcfBaseDateTimePicker>
			<view resource="dividerLine" stretches="width" width="${wcfStorePreviewDialog.contentWidth}"/>
			<text text="${foundationResources.storePreviewElapseLabel.string}" fgcolor="${wcfStorePreviewDialog.style.texthilitecolor}" multiline="true" width="${wcfStorePreviewDialog.contentWidth}"/>
			<wcfBaseRadioGroup name="timeElapse">
			   	<wcfBaseRadioButton value="true" text="${foundationResources.storePreviewElapseNotChange.string}" selected="true" multiline="true" width="${wcfStorePreviewDialog.contentWidth}"/>
			   	<wcfBaseRadioButton value="false" text="${foundationResources.storePreviewElapseChange.string}" multiline="true" width="${wcfStorePreviewDialog.contentWidth}"/>
			</wcfBaseRadioGroup>
			
			<view resource="dividerLine" stretches="width" width="${wcfStorePreviewDialog.contentWidth}"/>
			<view name="productRecommendationView">
				<text text="${foundationResources.storePreviewProductLabel.string}" fgcolor="${wcfStorePreviewDialog.style.texthilitecolor}" multiline="true" width="${wcfStorePreviewDialog.contentWidth}"/>
				<wcfBaseComboBox name="productRecommendation" visible="true"  width="${wcfStorePreviewDialog.contentWidth}" >
					<wcfPreviewListItem value="0" textKey="${foundationResources.storePreviewProductDefault}" selected="true"/>
					<wcfPreviewListItem value="1" textKey="${foundationResources.storePreviewProductAll}"/>
					<wcfPreviewListItem value="-1" textKey="${foundationResources.storePreviewProductNone}"/>
				</wcfBaseComboBox>
				<simplelayout axis="y"/>
			</view>
			<view name="customOptionsView" visible="false">
				<view resource="dividerLine" stretches="width" width="${wcfStorePreviewDialog.contentWidth}" />
				<wcfStorePreviewCustomOptions />
				<simplelayout axis="y" spacing="10"/>
			</view>
			<simplelayout axis="y" spacing="10"/>
		</view>
		<view name="buttonSection" placement="footer">
			<wcfButton name="storePreviewOkButton" text="${foundationResources.storePreviewOkButton.string}" onclick="wcfStorePreviewDialog.launchStorePreview();" enabled="${wcfStorePreviewDialog.addressView.inputTextValueSelector.text != ''}" isdefault="true"/>
			<wcfButton name="storePreviewCancelButton" text="${foundationResources.storePreviewCancelButton.string}" onclick="wcfStorePreviewDialog.closeWindow();" />
			<simplelayout axis="x" spacing="5" />
		</view>
		<simplelayout axis="y" />
		
		<!--- @keywords private -->
		<handler name="oninit">
			<![CDATA[
			this.populateStoreListDel = new lz.Delegate(this, "populateStoreList");
			this.applyStoreDel = new lz.Delegate(this, "applyStore");
			this.determineWebPathDel = new lz.Delegate(this, "determineWebPath");
			this.resetStoreListDel = new lz.Delegate(this, "resetStoreList");
			this.resetStoreListDel.register(wcfContextUtil.findContextValue(null, "identityId"), "onvalue");
			]]>
		</handler>
		
		<!--- @keywords private -->
		<method name="resetStoreList" args="e=null">
			<![CDATA[
			this.populatedCount = 0;
			this.storeList = [];
			wcfStorePreviewDialog.addressView.inputTextValueSelector.setListValues(null);
			this.storeListLoaded = false;
			]]>
		</method>
		
		<!--- @keywords private -->
		<method name="destroy">
			<![CDATA[
			this.populateStoreListDel.unregisterAll();
			delete this.populateStoreListDel;
			this.applyStoreDel.unregisterAll();
			delete this.applyStoreDel;
			this.determineWebPathDel.unregisterAll();
			delete this.determineWebPathDel;
			this.resetStoreListDel.unregisterAll();
			delete this.resetStoreListDel;
			super.destroy();
			]]>
		</method>
			
		<!---
			@keywords private
			Method to open the store preview dialog when user clicks 'Store Preview' option.
			@param Object contextParam: a map of name value pair context parameters. 
		-->
		<method name="openStorePreviewDialog" args="oEditor, contextParams">
			<![CDATA[
			if (!this.storeListLoaded) {
				wcfStorePreviewGetStoreListService.doRequest(this);
				this.storeListLoaded = true;
			}
			this.openWindow();
			this.setAttribute("oEditor",oEditor);
			this.applyStore(null);
			this.selectDefault();
			this.resetValues = {
				optionsOpen: this.optionsOpen,
				dateTimeRadioSelection: this.storePreviewOptions.dateTimeRadio.getSelection(),
				dateTimePickerSelectedDateTime: this.storePreviewOptions.dateTimePicker.getDateTime(),
				timeElapseSelection: this.storePreviewOptions.timeElapse.getSelection(),
				productRecommendationSelectedValue: this.storePreviewOptions.productRecommendationView.productRecommendation.selectedValue
			};
			
			if (contextParams && contextParams['memberGroupsIncluded']) {					
				var mbrGrpIncludedNames = contextParams['memberGroupsIncluded'].Names;
				var mbrGrpIncludedIds = contextParams['memberGroupsIncluded'].Ids;
				this.setAttribute("customerSegmentsIncludedNames", mbrGrpIncludedNames);
				this.setAttribute("customerSegmentsIncludedIds", mbrGrpIncludedIds);
			} else {
				this.setAttribute("customerSegmentsIncludedNames", "");
				this.setAttribute("customerSegmentsIncludedIds", "");			
			}
			
			var customOptionsVisible = false;
			for (var i = 0; i < this.customOptions.length; i++) {
				this.customOptions[i].initializeOption(contextParams);
				if (this.customOptions[i].visible) {
					customOptionsVisible = true;
				}
			}
			if (this.storePreviewOptions.customOptionsView.visible != customOptionsVisible) {
				this.storePreviewOptions.customOptionsView.setAttribute("visible", customOptionsVisible);
			}	
			]]>
		</method>
		
		<!---
			Restore focus after close.
		-->
		<method name="restoreFocus">
			<![CDATA[
			super.restoreFocus();
			if (lz.Focus.getFocus() == null) {
				this.oEditor.restoreFocus();
			}
			]]>
		</method>
		
		<!---
			@keywords private
			Method to close the store preview dialog and resets oEditor
		-->
		<method name="closeWindow">
			<![CDATA[
			super.closeWindow();
			if (this.resetValues != null) {
				this.setAttribute("optionsOpen", this.resetValues.optionsOpen);
				if (this.resetValues.dateTimeRadioSelection == null) {
					this.storePreviewOptions.dateTimeRadio.clearSelection();
				}
				else {
					this.storePreviewOptions.dateTimeRadio.select(this.resetValues.dateTimeRadioSelection);
				}
				this.storePreviewOptions.dateTimePicker.setDateTime(this.resetValues.dateTimePickerSelectedDateTime);
				if (this.resetValues.timeElapseSelection == null) {
					this.storePreviewOptions.timeElapse.clearSelection();
				}
				else {
					this.storePreviewOptions.timeElapse.select(this.resetValues.timeElapseSelection);
				}
				this.storePreviewOptions.productRecommendationView.productRecommendation.setAttribute("selectedValue", this.resetValues.productRecommendationSelectedValue);
			}
			this.resetValues = null;
			this.setAttribute("oEditor",null);
			]]>
		</method>
		
		<!---
			@keywords private
			Returns the preview path. Preview path is in the form of "/webapp/wcs/preview/".
		-->				
		<method name="getPreviewPath">
			<![CDATA[
			return (global["previewWebPath"] ? global.previewWebPath : "/webapp/wcs/preview/servlet");
			]]>
		</method>
		
		<!---
			@keywords private
			Returns the preview URL. Preview URL is in the form of "<previewProtocol>://<hostname>:<previewPort>/webapp/wcs/tools/servlet/PreviewStore".
		-->				
		<method name="getStorePreviewerUrl">
			<![CDATA[
			if (!this["storePreviewerUrl"]){
				var url = new LzURL(lz.Browser.getLoadURL());
				var previewProtocol = (global["previewProtocol"] ? global.previewProtocol : url.protocol);
				var previewPort = (global["previewPort"] ? global.previewPort : url.port);
				var previewWebPath = this.getPreviewPath();
				
				if (global["previewPort"] && !global["previewProtocol"]) {
					// this is coming from the WebServer SSL PreviewPort
					previewProtocol = "https";
				}
				
				this.storePreviewerUrl = previewProtocol
								+ "://"
								+ url.host
								+ ((previewPort != null && previewPort != "") ? (":" + previewPort) : "")
								+ previewWebPath
								+ "/PreviewStore";
			}
			if (wcfLogger.enabled) {
				wcfLogger.log("com.ibm.commerce.lobtools.foundation.service", "FINER", "wcfStorePreviewDialog", "getStorePreviewerUrl()", "URL=" + this.storePreviewerUrl);
			}

			return this.storePreviewerUrl;
			]]>
		</method>
		
		<!---
			@keywords private
			This method is called when the 'Launch Store Preview' button is clicked by user.
			It calls the CMWSPreviewSetup command which will setup the preview context and redirect to the preview URL.
		-->
		<method name="launchStorePreview">
			<![CDATA[
			if (wcfLogger.enabled) {
				wcfLogger.entering("com.ibm.commerce.lobtools.foundation.util", "wcfStorePreviewDialog", "launchStorePreview()");
			}
			
			var previewUrl = (global["serviceContextRoot"] ? global["serviceContextRoot"] : "/lobtools") + "/cmc/CMWSPreviewSetup";

			previewUrl += "?redirecturl=" + this.getStorePreviewerUrl();	

			// Build the redirect URL.
			var redirectstoreurl = wcfStringUtil.trim(wcfStorePreviewDialog.addressView.inputTextValueSelector.text);
			
			if (wcfLogger.enabled) {
				wcfLogger.log("com.ibm.commerce.lobtools.foundation.util", "FINER", "wcfStorePreviewDialog", "launchStorePreview()", "store URL=" + redirectstoreurl);
			}
			if (redirectstoreurl.indexOf("?") == -1) {
				redirectstoreurl += "?newPreviewSession=true";
			} else {
				while (redirectstoreurl.indexOf("&") != -1) {
					// replace all "&" with "~~amp~~"
					var index = redirectstoreurl.indexOf("&");
					redirectstoreurl = redirectstoreurl.substring(0,index) + "~~amp~~" +redirectstoreurl.substring(index+1);
				}
				redirectstoreurl += "~~amp~~newPreviewSession=true";	
			}
			
			previewUrl += "&redirectstoreurl=" + redirectstoreurl;

			var previewRestURI = "/wcs/previewresources";
			if (wcfStorePreviewDialog.oEditor.localContext != null &&
				wcfStorePreviewDialog.oEditor.localContext["storeConfig"] &&
				wcfStorePreviewDialog.oEditor.localContext.storeConfig.remoteWidgets != null &&
				wcfStorePreviewDialog.oEditor.localContext.storeConfig.remoteWidgets.restPreviewContextPath != "") {
				previewRestURI = wcfStorePreviewDialog.oEditor.localContext.storeConfig.remoteWidgets.restPreviewContextPath;
			}
			previewUrl += "&previewRestURI=" + previewRestURI;
			previewUrl += "&previewPath=" + this.getPreviewPath();
			
			var start = wcfStorePreviewDialog.storePreviewOptions.dateTimePicker.getDateValue();
			if (start != null) {
				previewUrl += "&start=" + start;
			}
			
			previewUrl += "&status=" + wcfStorePreviewDialog.storePreviewOptions.timeElapse.value;
			previewUrl += "&invstatus=" + wcfStorePreviewDialog.storePreviewOptions.productRecommendationView.productRecommendation.selectedValue.value;
			previewUrl += "&timeZoneId=" + wcfContextUtil.findContextValue(null, "timeZoneId").value;
			previewUrl += "&dateFormat=" + wcfDateUtil.getDatePreferenceFormat();
			previewUrl += "&timeFormat=" + wcfDateUtil.getTimePreferenceFormat();
			
			var includedMemberGroupIds = wcfStorePreviewDialog.customerSegmentsIncludedIds;
			if (includedMemberGroupIds == null) {
				includedMemberGroupIds = "";
			}
			previewUrl += "&includedMemberGroupIds=" + includedMemberGroupIds;
			
			if (wcfContextUtil.findContextValue(null, "workspacesEnabled").value == "true") {
				previewUrl += "&workspaceId=" + wcfContextUtil.findContextValue(null, "workspaceId").value;
				previewUrl += "&taskGroupId=" + wcfContextUtil.findContextValue(null, "workspaceTaskGroupId").value;
				previewUrl += "&taskId=" + wcfContextUtil.findContextValue(null, "workspaceTaskId").value;
			}
			
			var identityId = wcfContextUtil.findContextValue(null, "identityId");
			if (identityId) {
				previewUrl += "&identityId=" + identityId.value;
			}
									
			var locale = wcfContextUtil.findContextValue(null, "locale");
			if(locale){
				previewUrl += "&locale=" + locale.value;
			}

			var customOptions = wcfStorePreviewDialog.getCustomOptions();
			if (customOptions != null) {
				previewUrl += customOptions;
			}
			
			var identitySignature = wcfContextUtil.findContextValue(null, "identitySignature");
									
			var newWindowObj = new Object();
			newWindowObj.URL = "";
			newWindowObj.windowName = "Preview_Window";
			newWindowObj.windowFeatures = "scrollbars=yes,toolbar=no,directories=no,status=no,menubar=no,copyhistory=no,resizable=yes";
			newWindowObj.windowWidth = 1014;
			newWindowObj.windowHeight = 710;
			
			newWindowObj.content = "<html><body><form action=\"" + previewUrl + "\" method=\"POST\">";			
  			if (identitySignature) {
  				newWindowObj.content += "<input type=\"hidden\" name=\"identitySignature\" value=\"" + identitySignature.value + "\">";
  			}  			
			newWindowObj.content += "</form></body></html>";
			newWindowObj.submitForm = true;
			
			callJSFunction("openNewCenteredWindow", newWindowObj);
			
			this.resetValues = null;				 					
			this.closeWindow();
			
			if (wcfLogger.enabled) {
				wcfLogger.exiting("com.ibm.commerce.lobtools.foundation.util", "wcfStorePreviewDialog", "launchStorePreview()");
			}
			]]>
		</method>
		
		<!---
			@keywords private
			Creates the list of store addresse URL's
		-->
		<method name="populateCustomURLList" args="customURLList">
			<![CDATA[
			var inputSelector = wcfStorePreviewDialog.addressView.inputTextValueSelector;
			for (var i = 0; i < customURLList.length; i++){
				if( inputSelector.items.length >= this.maxURLsToList ){
					break;
				}
				inputSelector.addListValue(customURLList[i]);
			}
			this.getStores();
			]]>
		</method>
		
		<!---
			@keywords private
			Creates the list of store addresse URL's
		-->
		<method name="populateStoreList" args="e=null">
			<![CDATA[
			this.populateStoreListDel.unregisterAll();
			var inputSelector = wcfStorePreviewDialog.addressView.inputTextValueSelector;
			for (var i = this.populatedCount; i < this.storeList.length; i++) {
				if( inputSelector.items.length >= this.maxURLsToList ) {
					break;
				}
				var newStore = this.storeList[i];
				if (!newStore.configurationLoaded) {
					this.populateStoreListDel.register(newStore, "onconfigurationLoaded");
					newStore.loadConfiguration();
					break;
				}
				var storeURL = this.getStoreURL(newStore.storeId,"StoreView");
				var storeName = newStore.storeName;
				inputSelector.addListValue({
					"alias": storeName,
					"text": storeURL
				});
				this.populatedCount++;
				if (inputSelector.items.length < this.maxURLsToList) {
					if (newStore.staticContent.storeLevel.indexOf("MOBILE") != -1) {
						storeURL = this.getStoreURL(newStore.storeId,"mStoreView");
						storeName = newStore.storeName;
						inputSelector.addListValue({
							"alias": storeName,
							"aliasQualifierKey" : foundationResources.storePreviewMobileStore,
							"text": storeURL
						});
					}
				}
			}
			if (inputSelector.items.length >= this.maxURLsToList || this.populatedCount == this.storeList.length) {
				inputSelector.addListValue(wcfSearchListItem);
			}
			]]>
		</method>
		
		<!--- @keywords private -->
		<method name="applyStore" args="args">
			<![CDATA[
			if (args != null && args.store != null) {
				var storeview;
				var storename;
				if (args.mobile) {
					storeview = "mStoreView";
					storename = args.store.storeName + " - " + foundationResources.storePreviewMobileStore.string;
				} else {
					storeview = "StoreView";
					storename = args.store.storeName;
				}
				wcfStorePreviewDialog.addressView.inputTextValueSelector.inputTextArea.inputText.setText(
					this.getStoreURL(args.store.storeId, storeview));
				this.aliasView.aliasText.setText(storename);				
			} else {
				wcfStorePreviewDialog.addressView.inputTextValueSelector.inputTextArea.inputText.setText("");
			}
			]]>
		</method>

		<!---
			@keywords private
			This method will call the get all customer facing stores service.
		-->
		<method name="getStores">
			<![CDATA[
			wcfStoreSelectionGetStoreListService.doRequest(this, {
				usage: "IBM_CustomerFacingStore"
			});
			]]>
		</method>

		<!---
			@keywords private
			This method will get called after the wcfStoreSelectionGetStoreListService is completed.
			Set the storeList with the stores returned by the service.
		-->
		<method name="setValues" args="stores">
			<![CDATA[
			for (var i=0; i<stores.length; i++) {
				this.storeList.push(stores[i]);
			}
			this.determineWebPath();
			]]>
		</method>

		<!---
			@keywords private
			Determine the store's web path to be used for constructing the store home page URL.
		-->
		<method name="determineWebPath" args="e=null">
			<![CDATA[
			if (this.storesWebPath == "") {
				for (var storeId in wcfStoreUtil.storeMap) {
					if (wcfStoreUtil.storeMap[storeId].configurationLoaded) {
						this.storesWebPath = wcfStoreUtil.storeMap[storeId].staticContent.contextPath + wcfStoreUtil.storeMap[storeId].staticContent.urlMappingPath;
						this.selectDefault();
						break;
					}
				}
				if (this.storesWebPath == "" && this.storeList.length > 0) {
					this.determineWebPathDel.unregisterAll();
					this.determineWebPathDel.register(this.storeList[0], "onconfigurationLoaded");
					this.storeList[0].loadConfiguration();
				}
			}
			if (this.storesWebPath != "" && this.storeList.length > 0) {
				this.determineWebPathDel.unregisterAll();
				this.populateStoreList();
			}
			]]>
		</method>
		
		<!---
			@keywords private
			Returns the store's home page URL based on a specified store ID.
		-->
		<method name="getStoreURL" args="storeId, action">
			<![CDATA[
			var currentURL = new LzURL(lz.Browser.getLoadURL());
			var urlPrefix = "http://" + currentURL.host + this.storesWebPath + "/" + action + "?storeId=";
			return urlPrefix + storeId;
			]]>
		</method>
		
		<!---
			@keywords private
			Selects the default address list that we want to show up when the dialog opens
		-->
		<method name="selectDefault">
			<![CDATA[
			if (this.storesWebPath != "") {
				if(wcfStorePreviewDialog.oEditor["localContext"] && wcfStorePreviewDialog.oEditor.localContext.storeConfig.storeName != ""){
					wcfStoreSelectionGetDefaultStoreService.doRequest(this, {
						storeName: wcfStorePreviewDialog.oEditor.localContext.storeConfig.storeName,
						usage: "IBM_CustomerFacingStore"
					});
				} else if(preferenceManager.getPreference("CMCDefaultStore") != "") {
					wcfStoreSelectionGetDefaultStoreService.doRequest(this, {
						storeName: preferenceManager.getPreference("CMCDefaultStore"),
						usage: "IBM_CustomerFacingStore"
					});
				}
			}
			]]>
		</method>
		
		<!---
			@keywords private
			Method that is called when wcfStoreSelectionGetDefaultStoreService returns the user preference store object
		-->
		<method name="changeStore" args="store" >
			<![CDATA[
			this.applyStore({store: store, mobile: false});
			]]>
		</method>

		<!---
			@keywords private
			Set the focus in a deferred callback registered in wcfWindow.
		-->
		<method name="setFocusToModalComponent">
			<![CDATA[
				lz.Focus.setFocus(this.addressView.inputTextValueSelector.inputTextArea.inputText);
			]]>
		</method>

		<!---
			@keywords private
		-->
		<method name="addCustomOption" args="newOption">
			<![CDATA[
				this.customOptions.push(newOption);
			]]>
		</method>

		<!---
			@keywords private
		-->
		<method name="getCustomOptions">
			<![CDATA[
				var options = "";
				if (this.customOptions.length > 0) {
					for (var i = 0; i < this.customOptions.length; i++) {
						options += "&" + this.customOptions[i].optionName + "=" + encodeURIComponent(this.customOptions[i].getValue());
					}
				}
				return options;
			]]>
		</method>
	</wcfDialog>
			
	<!--- Store selection widget search service. -->
	<wcfService id="wcfStorePreviewGetStoreListService" url="/xml/StorePreviewAlias.xml" sendIdentity="false" sendLocale="false" sendWorkspaceContext="false" sendTimeZoneId="false" retryOnError="true">
		<!---
			Parse the store objects.
		-->
		<method name="parseObjects" args="requestParent, dataElement, hasMoreRecordsFlag, reqIdentifier, startIndex">
			<![CDATA[
			var customURLList = [];
            for (var i = 0; i < dataElement.childNodes.length; i++) {
                var e = dataElement.childNodes[i];
                if (e.nodeName == "storeAlias") {
                    var textNode = e.firstChild;
                    if (textNode != null && textNode.nodeType == 3 && e.attributes["name"]) {
                        customURLList.push({alias: e.attributes["name"], text: wcfStringUtil.trim(textNode.nodeValue, wcfStringUtil.trimWhiteSpaceAndLineFeed)});
                    }
                }
            }
			requestParent.populateCustomURLList(customURLList);
			]]>
		</method>
	</wcfService>
	
	<!---
		@keywords private
		List item used for drop down lists inside {@Link wcfStorePreviewDialog}
	-->
	<class name="wcfPreviewListItem" extends="node">
		<!---
			@keywords private
			Text of item that will be displayed in the list
		-->
		<attribute name="text" type="string" value="${null}"/>
		<!---
			@keywords private
			value of the list item
		-->
		<attribute name="value" type="string"/>
		<!---
			@keywords private
			Text key when setting the text from a resource value
		-->
		<attribute name="textKey" value="null"/>
		<!---
			@keywords private
			Tracks if this item is currently selected
		-->
		<attribute name="selected" type="boolean" value="false"/>

		<handler name="oninit">
			<![CDATA[
			parent.addItem(text, this.value, this.textKey);
			if(this.selected){
				parent.selectItem(this.value);
			}
			]]>
		</handler>
	</class>
		
	<!---
		@keywords private
		List item that acts as a button to launch the store find dialog in store preview url list
	-->
	<node id="wcfSearchListItem">
		<!---
			@keywords private
			List item text that will be displayed inside the drop down
		-->
		<attribute name="text" value="${null}"/>
		<!---
			@keywords private
			Key for list item text that will be displayed inside the drop down
		-->
		<attribute name="textKey" value="${foundationResources.searchButton}"/>
		
		<!---
			@keywords private
			Puts a seperator before the displayed text
		-->
		<attribute name="addSeparatorBefore" type="boolean" value="true"/>
		<!---
			@keywords private
			Icon to be displayed infront of the text
		-->
		<attribute name="icon" type="string" value=""/>
			<!---
			@keywords private
			If item is selectable then the checkmark will display when the user selects it
		-->
		<attribute name="selectable" type="boolean" value="false"/>
	</node>

</library>
